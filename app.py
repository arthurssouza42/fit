
import streamlit as st
import pandas as pd
from unidecode import unidecode
from difflib import get_close_matches
from io import StringIO

st.set_page_config(page_title="Registro Alimentar", layout="wide")

# === Fun√ß√µes auxiliares ===

@st.cache_data
def carregar_dados():
    df = pd.read_csv("alimentos.csv")
    df.columns = df.columns.str.strip()
    df["Descri√ß√£oFormatada"] = df["Descri√ß√£o dos alimentos"].apply(lambda x: unidecode(str(x)).lower())
    return df

def buscar_alimentos(query, df):
    query = unidecode(query.lower())
    resultados = df[df["Descri√ß√£oFormatada"].str.contains(query)]
    if resultados.empty:
        similares = get_close_matches(query, df["Descri√ß√£oFormatada"], n=5, cutoff=0.4)
        resultados = df[df["Descri√ß√£oFormatada"].isin(similares)]
    return resultados

def calcular_nutrientes(info_nutricional, quantidade):
    fator = quantidade / 100
    return info_nutricional * fator

# === App ===

st.title("üçΩÔ∏è Registro Alimentar")
df = carregar_dados()

if "refeicoes" not in st.session_state:
    st.session_state.refeicoes = {"Caf√© da manh√£": [], "Almo√ßo": [], "Jantar": [], "Lanches": []}

nome_busca = st.text_input("Digite o nome de um alimento:")
resultados = buscar_alimentos(nome_busca, df) if nome_busca else pd.DataFrame()

if not resultados.empty:
    selecionado = st.selectbox("Selecione o alimento encontrado:", resultados["Descri√ß√£o dos alimentos"].tolist())
    quantidade = st.number_input("Quantidade (em gramas):", min_value=1, max_value=1000, step=10, value=100)
    refeicao = st.selectbox("Em qual refei√ß√£o deseja registrar?", list(st.session_state.refeicoes.keys()))

    if st.button("Registrar alimento"):
        linha = df[df["Descri√ß√£o dos alimentos"] == selecionado].iloc[0]
        info_nutricional = linha[["Energia..kcal.", "Prote√≠na..g.", "Lip√≠deos..g.", "Carboidrato..g.", "Fibra.Alimentar..g."]].astype(float)
        valores = calcular_nutrientes(info_nutricional, quantidade)
        registro = {
            "Alimento": selecionado,
            "Quantidade (g)": quantidade,
            "Calorias (kcal)": valores["Energia..kcal."],
            "Prote√≠na (g)": valores["Prote√≠na..g."],
            "Lip√≠deos (g)": valores["Lip√≠deos..g."],
            "Carboidrato (g)": valores["Carboidrato..g."],
            "Fibra (g)": valores["Fibra.Alimentar..g."]
        }
        st.session_state.refeicoes[refeicao].append(registro)
        st.success(f"{quantidade}g de {selecionado} adicionado √† refei√ß√£o: {refeicao}")

# === Mostrar Tabelas ===

st.subheader("üìä Consumo Di√°rio")
tudo = []
for nome, itens in st.session_state.refeicoes.items():
    if itens:
        st.markdown(f"### üç¥ {nome}")
        tabela = pd.DataFrame(itens)
        st.dataframe(tabela, use_container_width=True)
        tudo.extend(itens)

if tudo:
    df_total = pd.DataFrame(tudo)
    st.markdown("## ‚úÖ Totais do Dia")
    totais = df_total.drop(columns=["Alimento", "Quantidade (g)"]).sum().round(2)
    st.write(totais.to_frame("Total"))

    # Exportar CSV
    csv = df_total.to_csv(index=False)
    st.download_button("üì• Exportar registro do dia (CSV)", csv, file_name="registro_alimentar.csv", mime="text/csv")
